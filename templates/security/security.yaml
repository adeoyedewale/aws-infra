AWSTemplateFormatVersion: '2010-09-09'
Description: "AWS Network Firewall Security Stack"

Parameters: {}

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaNetworkFirewallRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaNetworkFirewallPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  NetworkFirewallEndpointsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Custom resource to transform Network Firewall EndpointIds
      Handler: index.lambda_handler
      Runtime: python3.9
      Timeout: 10
      Role: !GetAtt LambdaExecutionRole.Arn
      FunctionName: transform-networkfirewall-endpointids
      Code:
        ZipFile: |
            import json
            import cfnresponse

            def lambda_handler(event, context):
                try:
                    if event['RequestType'] in ['Create', 'Update']:
                        endpoint_ids = event['ResourceProperties'].get('EndpointIds', [])
                        transformed_endpoints = {f"Id{eid.split(':')[0][-1].upper()}": eid.split(':')[-1] for eid in endpoint_ids}

                        response_data = transformed_endpoints
                        physical_id = "NetworkFirewallEndpoints"
                    else:
                        response_data = {}
                        physical_id = event.get('PhysicalResourceId', "NetworkFirewallEndpoints")

                    cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, physical_id)
                except Exception as e:
                    response_data = {"Error": str(e)}
                    cfnresponse.send(event, context, cfnresponse.FAILED, response_data, "NetworkFirewallEndpoints")

  NetworkFirewallEndpoints:
    Type: Custom::NetworkFirewallEndpoints
    Properties:
        ServiceToken: !GetAtt NetworkFirewallEndpointsFunction.Arn
        EndpointIds: !GetAtt NetworkFirewall.EndpointIds


  # AWS Network Firewall
  NetworkFirewall:
    Type: AWS::NetworkFirewall::Firewall
    Properties:
      FirewallName: "SecurityFirewall"
      FirewallPolicyArn: !Ref NetworkFirewallPolicy
      VpcId: !ImportValue networking-VPCId
      SubnetMappings:
        - SubnetId: !ImportValue networking-FirewallSubnet1Id
        - SubnetId: !ImportValue networking-FirewallSubnet2Id
        - SubnetId: !ImportValue networking-RdsFirewallSubnetId
      DeleteProtection: false
      SubnetChangeProtection: false
      FirewallPolicyChangeProtection: false
      Tags:
        - Key: Name
          Value: "AWS-Network-Firewall"

    

  # AWS Network Firewall Policy
  NetworkFirewallPolicy:
    Type: AWS::NetworkFirewall::FirewallPolicy
    Properties:
      FirewallPolicyName: "SecurityFirewallPolicy"
      FirewallPolicy:
        StatelessRuleGroupReferences: []
        StatefulRuleGroupReferences: []
        StatelessDefaultActions:
          - "aws:forward_to_sfe"
        StatelessFragmentDefaultActions:
          - "aws:forward_to_sfe"
      Tags:
        - Key: Name
          Value: "AWS-Network-Firewall-Policy"

  # AWS Network Firewall Logging
  NetworkFirewallLogging:
    Type: AWS::NetworkFirewall::LoggingConfiguration
    Properties:
      FirewallArn: !Ref NetworkFirewall
      LoggingConfiguration:
        LogDestinationConfigs:
          - LogDestinationType: "CloudWatchLogs"
            LogDestination:
              logGroup: !Ref FirewallLogGroup
            LogType: "FLOW"

  FirewallLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/network-firewall/security-logs"
      RetentionInDays: 30
      Tags:
        - Key: Name
          Value: "FirewallLogGroup"

Outputs:
  FirewallArn:
    Description: "AWS Network Firewall ARN"
    Value: !Ref NetworkFirewall
    Export:
      Name: !Sub "${AWS::StackName}-FirewallArn"

  FirewallEndpointIds:
    Description: "AWS Network Firewall Endpoint IDs"
    Value: !Join [":", !GetAtt NetworkFirewall.EndpointIds]
    Export:
      Name: !Sub "${AWS::StackName}-FirewallEndpointIds"

  FirewallSubnet1EndpointId:
    Description: "AWS Network Firewall Subnet1 Endpoint ID"
    #Value: !Select [0, !GetAtt NetworkFirewall.EndpointIds]
    Value: !GetAtt NetworkFirewallEndpoints.IdA
    Export:
      Name: !Sub "${AWS::StackName}-FirewallSubnet1EndpointId"

  FirewallSubnet2EndpointId:
    Description: "AWS Network Firewall Subnet2 Endpoint ID"
    Value: !GetAtt NetworkFirewallEndpoints.IdB
    Export:
      Name: !Sub "${AWS::StackName}-FirewallSubnet2EndpointId"

  RdsFirewallSubnetEndpointId:
    Description: "AWS Network Firewall Subnet1 Endpoint ID"
    Value: GetAtt NetworkFirewallEndpoints.IdC
    Export:
      Name: !Sub "${AWS::StackName}-RdsFirewallSubnetEndpointId"

  FirewallPolicyArn:
    Description: "AWS Network Firewall Policy ARN"
    Value: !Ref NetworkFirewallPolicy
    Export:
      Name: !Sub "${AWS::StackName}-FirewallPolicyArn"

  FirewallLogGroupArn:
    Description: "CloudWatch Log Group ARN for Firewall Logs"
    Value: !GetAtt FirewallLogGroup.Arn
    Export:
      Name: !Sub "${AWS::StackName}-FirewallLogGroupArn"
